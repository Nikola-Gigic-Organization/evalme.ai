{
  "version": 3,
  "sources": ["../keystone.ts", "../schemas/User.ts", "../schemas/Topic.ts", "../schemas/TopicQuestion.ts", "../schemas/Tag.ts", "../schemas/UserAnswer.ts", "../schemas/index.ts", "../schema.ts", "../auth.ts"],
  "sourcesContent": ["// Welcome to Keystone!\n//\n// This file is what Keystone uses as the entry-point to your headless backend\n//\n// Keystone imports the default export of this file, expecting a Keystone configuration object\n//   you can find out more at https://keystonejs.com/docs/apis/config\n\nimport { config } from \"@keystone-6/core\";\n\n// to keep this file tidy, we define our schema in a different file\nimport { lists } from \"./schema\";\n\n// authentication is configured separately here too, but you might move this elsewhere\n// when you write your list-level access control functions, as they typically rely on session data\nimport { withAuth, session } from \"./auth\";\nimport dotenv from \"dotenv\";\n\ndotenv.config();\n\nexport default withAuth(\n  config({\n    db: {\n      // we're using sqlite for the fastest startup experience\n      //   for more information on what database might be appropriate for you\n      //   see https://keystonejs.com/docs/guides/choosing-a-database#title\n      provider: \"postgresql\",\n      url: process.env.DATABASE_URL!,\n      prismaClientPath: \"node_modules/.prisma/client\",\n    },\n    lists,\n    session,\n  }),\n);\n", "import { ListConfig, list } from \"@keystone-6/core\";\nimport { type Lists, type Context } from \".keystone/types\";\nimport { allowAll } from \"@keystone-6/core/access\";\nimport {\n  text,\n  password,\n  timestamp,\n  relationship,\n} from \"@keystone-6/core/fields\";\n\nconst User: ListConfig<Lists.User.TypeInfo> = list({\n  access: allowAll,\n  fields: {\n    name: text({ validation: { isRequired: true } }),\n    email: text({\n      validation: { isRequired: true },\n      isIndexed: \"unique\",\n    }),\n\n    password: password({ validation: { isRequired: true } }),\n    topicAnswers: relationship({ ref: \"UserAnswer.user\", many: true }),\n    createdAt: timestamp({\n      defaultValue: { kind: \"now\" },\n    }),\n    updatedAt: timestamp({\n      defaultValue: { kind: \"now\" },\n    }),\n  },\n});\n\nexport default User;\n", "import { ListConfig, graphql, list } from \"@keystone-6/core\";\nimport { type Lists, type Context } from \".keystone/types\";\nimport { allowAll } from \"@keystone-6/core/access\";\nimport {\n  relationship,\n  text,\n  timestamp,\n  virtual,\n} from \"@keystone-6/core/fields\";\n\nconst Topic: ListConfig<Lists.Topic.TypeInfo> = list({\n  access: allowAll,\n  fields: {\n    slug: text({ validation: { isRequired: true }, isIndexed: \"unique\" }),\n    title: text({ validation: { isRequired: true } }),\n    description: text({}),\n    questions: relationship({\n      ref: \"TopicQuestion.topic\",\n      many: true,\n      ui: {\n        createView: { fieldMode: \"edit\" },\n        itemView: { fieldMode: \"edit\" },\n      },\n    }),\n    tags: relationship({ ref: \"Tag\", many: true }),\n    createdAt: timestamp({\n      defaultValue: { kind: \"now\" },\n    }),\n    updatedAt: timestamp({\n      defaultValue: { kind: \"now\" },\n    }),\n  },\n});\n\nexport default Topic;\n", "import { ListConfig, graphql, list } from \"@keystone-6/core\";\nimport { type Lists, type Context } from \".keystone/types\";\nimport { allowAll } from \"@keystone-6/core/access\";\nimport {\n  integer,\n  relationship,\n  text,\n  timestamp,\n  virtual,\n} from \"@keystone-6/core/fields\";\n\nconst TopicQuestion: ListConfig<Lists.TopicQuestion.TypeInfo> = list({\n  access: allowAll,\n  fields: {\n    topic: relationship({ ref: \"Topic.questions\", many: false }),\n    title: text({ validation: { isRequired: true } }),\n    text: text({ validation: { isRequired: true } }),\n    order: integer({ defaultValue: 1 }),\n    createdAt: timestamp({\n      defaultValue: { kind: \"now\" },\n    }),\n    updatedAt: timestamp({\n      defaultValue: { kind: \"now\" },\n    }),\n  },\n});\n\nexport default TopicQuestion;\n", "import { ListConfig, graphql, list } from \"@keystone-6/core\";\nimport { type Lists, type Context } from \".keystone/types\";\nimport { allowAll } from \"@keystone-6/core/access\";\nimport {\n  relationship,\n  text,\n  timestamp,\n  virtual,\n} from \"@keystone-6/core/fields\";\n\nconst Tag: ListConfig<Lists.Tag.TypeInfo> = list({\n  access: allowAll,\n  fields: {\n    name: text({ validation: { isRequired: true }, isIndexed: \"unique\" }),\n    createdAt: timestamp({\n      defaultValue: { kind: \"now\" },\n    }),\n    updatedAt: timestamp({\n      defaultValue: { kind: \"now\" },\n    }),\n  },\n});\n\nexport default Tag;\n", "import { ListConfig, graphql, list } from \"@keystone-6/core\";\nimport { type Lists, type Context } from \".keystone/types\";\nimport { allowAll } from \"@keystone-6/core/access\";\nimport {\n  relationship,\n  text,\n  timestamp,\n  virtual,\n} from \"@keystone-6/core/fields\";\n\nconst UserAnswer: ListConfig<Lists.UserAnswer.TypeInfo> = list({\n  access: allowAll,\n  fields: {\n    user: relationship({ ref: \"User.topicAnswers\", many: false }),\n    question: relationship({ ref: \"TopicQuestion\", many: false }),\n    answer: text({}),\n    createdAt: timestamp({\n      defaultValue: { kind: \"now\" },\n    }),\n    updatedAt: timestamp({\n      defaultValue: { kind: \"now\" },\n    }),\n  },\n});\n\nexport default UserAnswer;\n", "import { default as User } from \"./User\";\nimport { default as Topic } from \"./Topic\";\nimport { default as TopicQuestion } from \"./TopicQuestion\";\nimport { default as Tag } from \"./Tag\";\nimport { default as UserAnswer } from \"./UserAnswer\";\n\nexport default { User, Topic, TopicQuestion, Tag, UserAnswer };\n", "import schemas from \"./schemas\";\nimport type { Lists } from \".keystone/types\";\n\nexport const lists: Lists = schemas;\n", "// Welcome to some authentication for Keystone\n//\n// This is using @keystone-6/auth to add the following\n// - A sign-in page for your Admin UI\n// - A cookie-based stateless session strategy\n//    - Using a User email as the identifier\n//    - 30 day cookie expiration\n//\n// This file does not configure what Users can do, and the default for this starter\n// project is to allow anyone - logged-in or not - to do anything.\n//\n// If you want to prevent random people on the internet from accessing your data,\n// you can find out how by reading https://keystonejs.com/docs/guides/auth-and-access-control\n//\n// If you want to learn more about how our out-of-the-box authentication works, please\n// read https://keystonejs.com/docs/apis/auth#authentication-api\n\nimport { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from '@keystone-6/core/session';\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n  //   this can be helpful for when you are writing your access control functions\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  sessionData: 'name createdAt',\n  secretField: 'password',\n\n  // WARNING: remove initFirstItem functionality in production\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n  initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n    fields: ['name', 'email', 'password'],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n  },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n"],
  "mappings": "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",
  "names": ["import_core", "import_core", "import_access", "import_fields", "import_core", "import_access", "import_fields", "import_core", "import_access", "import_fields", "import_core", "import_access", "import_fields", "dotenv"]
}
