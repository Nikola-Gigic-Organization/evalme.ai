# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  oAuthId: String
  name: String
  email: String
  password: PasswordState
  topicAnswers(where: UserAnswerWhereInput! = {}, orderBy: [UserAnswerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserAnswerWhereUniqueInput): [UserAnswer!]
  topicAnswersCount(where: UserAnswerWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  oAuthId: StringNullableFilter
  name: StringFilter
  email: StringFilter
  topicAnswers: UserAnswerManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

enum QueryMode {
  default
  insensitive
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserAnswerManyRelationFilter {
  every: UserAnswerWhereInput
  some: UserAnswerWhereInput
  none: UserAnswerWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  oAuthId: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  oAuthId: String
  name: String
  email: String
  password: String
  topicAnswers: UserAnswerRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserAnswerRelateToManyForUpdateInput {
  disconnect: [UserAnswerWhereUniqueInput!]
  set: [UserAnswerWhereUniqueInput!]
  create: [UserAnswerCreateInput!]
  connect: [UserAnswerWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  oAuthId: String
  name: String
  email: String
  password: String
  topicAnswers: UserAnswerRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input UserAnswerRelateToManyForCreateInput {
  create: [UserAnswerCreateInput!]
  connect: [UserAnswerWhereUniqueInput!]
}

type Topic {
  id: ID!
  slug: String
  title: String
  description: String
  questions(where: TopicQuestionWhereInput! = {}, orderBy: [TopicQuestionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicQuestionWhereUniqueInput): [TopicQuestion!]
  questionsCount(where: TopicQuestionWhereInput! = {}): Int
  viewerAnsweredQuestions: [UserAnswer]
  viewerAnsweredQuestionsCount: Int
  viewerAnsweredAllQuestions: Boolean
  viewerTopicProgressStatus: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input TopicWhereUniqueInput {
  id: ID
  slug: String
}

input TopicWhereInput {
  AND: [TopicWhereInput!]
  OR: [TopicWhereInput!]
  NOT: [TopicWhereInput!]
  id: IDFilter
  slug: StringFilter
  title: StringFilter
  description: StringFilter
  questions: TopicQuestionManyRelationFilter
  tags: TagManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input TopicQuestionManyRelationFilter {
  every: TopicQuestionWhereInput
  some: TopicQuestionWhereInput
  none: TopicQuestionWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input TopicOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  title: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TopicUpdateInput {
  slug: String
  title: String
  description: String
  questions: TopicQuestionRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input TopicQuestionRelateToManyForUpdateInput {
  disconnect: [TopicQuestionWhereUniqueInput!]
  set: [TopicQuestionWhereUniqueInput!]
  create: [TopicQuestionCreateInput!]
  connect: [TopicQuestionWhereUniqueInput!]
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input TopicUpdateArgs {
  where: TopicWhereUniqueInput!
  data: TopicUpdateInput!
}

input TopicCreateInput {
  slug: String
  title: String
  description: String
  questions: TopicQuestionRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input TopicQuestionRelateToManyForCreateInput {
  create: [TopicQuestionCreateInput!]
  connect: [TopicQuestionWhereUniqueInput!]
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type TopicQuestion {
  id: ID!
  topic: Topic
  title: String
  text: String
  order: Int
  viewerAnswer: UserAnswer
  createdAt: DateTime
  updatedAt: DateTime
}

input TopicQuestionWhereUniqueInput {
  id: ID
}

input TopicQuestionWhereInput {
  AND: [TopicQuestionWhereInput!]
  OR: [TopicQuestionWhereInput!]
  NOT: [TopicQuestionWhereInput!]
  id: IDFilter
  topic: TopicWhereInput
  title: StringFilter
  text: StringFilter
  order: IntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input TopicQuestionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  text: OrderDirection
  order: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TopicQuestionUpdateInput {
  topic: TopicRelateToOneForUpdateInput
  title: String
  text: String
  order: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input TopicRelateToOneForUpdateInput {
  create: TopicCreateInput
  connect: TopicWhereUniqueInput
  disconnect: Boolean
}

input TopicQuestionUpdateArgs {
  where: TopicQuestionWhereUniqueInput!
  data: TopicQuestionUpdateInput!
}

input TopicQuestionCreateInput {
  topic: TopicRelateToOneForCreateInput
  title: String
  text: String
  order: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input TopicRelateToOneForCreateInput {
  create: TopicCreateInput
  connect: TopicWhereUniqueInput
}

type Tag {
  id: ID!
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TagUpdateInput {
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type UserAnswer {
  id: ID!
  user: User
  question: TopicQuestion
  userAnswer: String
  openAIAnswer: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserAnswerWhereUniqueInput {
  id: ID
}

input UserAnswerWhereInput {
  AND: [UserAnswerWhereInput!]
  OR: [UserAnswerWhereInput!]
  NOT: [UserAnswerWhereInput!]
  id: IDFilter
  user: UserWhereInput
  question: TopicQuestionWhereInput
  userAnswer: StringFilter
  openAIAnswer: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input UserAnswerOrderByInput {
  id: OrderDirection
  userAnswer: OrderDirection
  openAIAnswer: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input UserAnswerUpdateInput {
  user: UserRelateToOneForUpdateInput
  question: TopicQuestionRelateToOneForUpdateInput
  userAnswer: String
  openAIAnswer: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TopicQuestionRelateToOneForUpdateInput {
  create: TopicQuestionCreateInput
  connect: TopicQuestionWhereUniqueInput
  disconnect: Boolean
}

input UserAnswerUpdateArgs {
  where: UserAnswerWhereUniqueInput!
  data: UserAnswerUpdateInput!
}

input UserAnswerCreateInput {
  user: UserRelateToOneForCreateInput
  question: TopicQuestionRelateToOneForCreateInput
  userAnswer: String
  openAIAnswer: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TopicQuestionRelateToOneForCreateInput {
  create: TopicQuestionCreateInput
  connect: TopicQuestionWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createTopic(data: TopicCreateInput!): Topic
  createTopics(data: [TopicCreateInput!]!): [Topic]
  updateTopic(where: TopicWhereUniqueInput!, data: TopicUpdateInput!): Topic
  updateTopics(data: [TopicUpdateArgs!]!): [Topic]
  deleteTopic(where: TopicWhereUniqueInput!): Topic
  deleteTopics(where: [TopicWhereUniqueInput!]!): [Topic]
  createTopicQuestion(data: TopicQuestionCreateInput!): TopicQuestion
  createTopicQuestions(data: [TopicQuestionCreateInput!]!): [TopicQuestion]
  updateTopicQuestion(where: TopicQuestionWhereUniqueInput!, data: TopicQuestionUpdateInput!): TopicQuestion
  updateTopicQuestions(data: [TopicQuestionUpdateArgs!]!): [TopicQuestion]
  deleteTopicQuestion(where: TopicQuestionWhereUniqueInput!): TopicQuestion
  deleteTopicQuestions(where: [TopicQuestionWhereUniqueInput!]!): [TopicQuestion]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createUserAnswer(data: UserAnswerCreateInput!): UserAnswer
  createUserAnswers(data: [UserAnswerCreateInput!]!): [UserAnswer]
  updateUserAnswer(where: UserAnswerWhereUniqueInput!, data: UserAnswerUpdateInput!): UserAnswer
  updateUserAnswers(data: [UserAnswerUpdateArgs!]!): [UserAnswer]
  deleteUserAnswer(where: UserAnswerWhereUniqueInput!): UserAnswer
  deleteUserAnswers(where: [UserAnswerWhereUniqueInput!]!): [UserAnswer]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topic(where: TopicWhereUniqueInput!): Topic
  topicsCount(where: TopicWhereInput! = {}): Int
  topicQuestions(where: TopicQuestionWhereInput! = {}, orderBy: [TopicQuestionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicQuestionWhereUniqueInput): [TopicQuestion!]
  topicQuestion(where: TopicQuestionWhereUniqueInput!): TopicQuestion
  topicQuestionsCount(where: TopicQuestionWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  userAnswers(where: UserAnswerWhereInput! = {}, orderBy: [UserAnswerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserAnswerWhereUniqueInput): [UserAnswer!]
  userAnswer(where: UserAnswerWhereUniqueInput!): UserAnswer
  userAnswersCount(where: UserAnswerWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  getViewerInProgressTopics: [Topic!]!
  getViewerCompletedTopics: [Topic]
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

enum TopicProgressStatus {
  NotStarted
  InProgress
  Completed
}
